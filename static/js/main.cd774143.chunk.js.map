{"version":3,"sources":["types/server.ts","utils/tableColumnsUtils.ts","components/ServersTable/ServerTableColumns.tsx","components/ServersTable/ServersTable.tsx","types/team.ts","components/TeamsList/TeamCard.tsx","components/TeamsList/TeamsList.tsx","api/TeamApi.ts","App.tsx","api/ServerApi.ts","utils/ArrayUtils.ts","serviceWorker.ts","index.tsx"],"names":["Server","server","id","serverName","serverBase","teamName","systemName","status","tags","ram","cores","this","getColumnByField","titleName","serverFieldName","title","dataIndex","key","sorter","firstServer","secondServer","field","sortByField","getServersTableColumns","deleteServer","render","text","icon","faEdit","map","tag","color","length","toUpperCase","faRedoAlt","record","faTrashAlt","onClick","event","ServersTable","servers","data","dataSource","columns","bordered","style","direction","Team","team","name","numberOfServers","numberOfSystems","TeamCard","TeamsList","useState","teams","renderItem","TabPane","Tabs","App","setServers","className","tab","serverId","console","log","serverList","filter","filterObjFromArray","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd774143.chunk.js","sourcesContent":["export const ID_FIELD: keyof Server = 'id';\nexport const SERVER_NAME_FIELD: keyof Server = 'serverName';\nexport const SERVER_BASE_FIELD: keyof Server = 'serverBase';\nexport const TEAM_NAME_FIELD: keyof Server = 'teamName';\nexport const SYSTEM_NAME_FIELD: keyof Server = 'systemName';\nexport const STATUS_FIELD: keyof Server = 'status';\nexport const TAGS_FIELD: keyof Server = 'tags';\nexport const RAM_FIELD: keyof Server = 'ram';\nexport const CORES_FIELD: keyof Server = 'cores';\n\ninterface ServerInterface {\n    id: string;\n    serverName: string;\n    serverBase: string;\n    teamName: string;\n    systemName: string;\n    status: string;\n    tags: Array<string>;\n    ram: string;\n    cores: string;\n}\n\nexport class Server {\n    id: string;\n    serverName: string;\n    serverBase: string;\n    teamName: string;\n    systemName: string;\n    status: string;\n    tags: Array<string>;\n    ram: string;\n    cores: string;\n\n    constructor(server: ServerInterface) {\n        this.id = server.id;\n        this.serverName = server.serverName;\n        this.serverBase = server.serverBase;\n        this.teamName = server.teamName;\n        this.systemName = server.systemName;\n        this.status = server.status;\n        this.tags = server.tags;\n        this.ram = server.ram;\n        this.cores = server.cores;\n    }\n}","import {Server} from \"../types/server\";\n\n/**\n * Compares between two server objects by a specific field.\n * @param firstServer\n * @param secondServer\n * @param field The field serverName by which the objects should be compared\n */\nconst sortByField = (firstServer: Server, secondServer: Server, field: keyof Server): number => {\n    if (firstServer[field] > secondServer[field]) {\n        return 1;\n    } else if (firstServer[field] < secondServer[field]) {\n        return -1;\n    } else {\n        return 0;\n    }\n};\n\nexport const getColumnByField = (titleName: string, serverFieldName: keyof Server) => {\n    return {\n        title: titleName,\n        dataIndex: serverFieldName,\n        key: serverFieldName,\n        sorter: (firstServer: Server, secondServer: Server) =>\n            sortByField(firstServer, secondServer, serverFieldName),\n    };\n};","import React from \"react\";\nimport {Tag} from \"antd\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faEdit} from \"@fortawesome/free-regular-svg-icons/faEdit\";\nimport {faTrashAlt} from \"@fortawesome/free-regular-svg-icons/faTrashAlt\";\nimport {faRedoAlt} from \"@fortawesome/free-solid-svg-icons/faRedoAlt\";\nimport {\n    Server,\n    CORES_FIELD, RAM_FIELD, SERVER_NAME_FIELD,\n    STATUS_FIELD, SYSTEM_NAME_FIELD,\n    TAGS_FIELD, TEAM_NAME_FIELD, SERVER_BASE_FIELD\n} from \"../../types/server\";\nimport {getColumnByField} from \"../../utils/tableColumnsUtils\";\n\nconst getServersTableColumns = (deleteServer: (serverId: string) => void) => { return [\n    {\n        ...getColumnByField('שרת', SERVER_NAME_FIELD),\n        render: (text: string) => (\n            <span>\n                <FontAwesomeIcon icon={faEdit} />\n                <a> {text}</a>\n            </span>\n        ),\n    },\n    {...getColumnByField('בסיס', SERVER_BASE_FIELD)},\n    {...getColumnByField('צוות', TEAM_NAME_FIELD)},\n    {...getColumnByField('מערכת', SYSTEM_NAME_FIELD)},\n    {\n        ...getColumnByField('מבצעי / טסטים', TAGS_FIELD),\n        render: (tags: Array<string>)  => (\n            <span>\n                {tags.map(tag => {\n                    let color = tag.length > 5 ? 'geekblue' : 'green';\n                    if (tag === 'Tests') {\n                        color = 'volcano';\n                    }\n                    return (\n                        <Tag color={color} key={tag}>\n                            {tag.toUpperCase()}\n                        </Tag>\n                    );\n                })}\n            </span>\n        ),\n    },\n    {\n        ...getColumnByField('סטטוס', STATUS_FIELD),\n        render: (text:string) => (\n            <span>\n                <FontAwesomeIcon icon={faRedoAlt} />\n                <a> {text}</a>\n            </span>\n        )\n    },\n    {...getColumnByField('ראם', RAM_FIELD)},\n    {...getColumnByField('מספר ליבות', CORES_FIELD),},\n    {\n        title: 'Delete',\n        key: 'delete',\n        render: (text: string, record:Server) => (\n            <span>\n                <FontAwesomeIcon icon={faTrashAlt} onClick={ (event) => deleteServer(record.id)} />\n            </span>\n),},\n];};\n\nexport default getServersTableColumns;\n","import React from \"react\";\nimport { Table } from 'antd';\nimport \"antd/lib/table/style/index.css\"\nimport \"antd/lib/tag/style/index.css\"\nimport \"antd/lib/pagination/style/index.css\"\nimport getServersTableColumns from \"./ServerTableColumns\";\nimport {Server} from \"../../types/server\";\nimport \"./ServersTable.css\"\n\ninterface ServersTableProps {\n    servers: Array<Server>;\n    deleteServer: (serverId: string) => void;\n}\n\n\nconst ServersTable: React.FC<ServersTableProps> = ({servers, deleteServer}) => {\n    const data = servers.map(server => ({\n        ...server,\n        key: server.id,\n    }));\n\n    return (\n        <Table dataSource={data} columns={getServersTableColumns(deleteServer)} bordered={false} style={{direction: 'rtl'}}/>\n        );\n};\n\nexport default ServersTable;\n","interface TeamInterface {\n    id: string;\n    name: string;\n    numberOfServers: number;\n    numberOfSystems: number;\n\n}\n\nexport class Team {\n    id: string;\n    name: string;\n    numberOfServers: number;\n    numberOfSystems: number;\n\n    constructor(team: TeamInterface) {\n        this.id = team.id;\n        this.name = team.name;\n        this.numberOfServers = team.numberOfServers;\n        this.numberOfSystems = team.numberOfSystems;\n    }\n}","import React from \"react\";\nimport {Card} from \"antd\";\nimport {Team} from \"../../types/team\";\nimport \"antd/lib/card/style/index.css\"\nimport \"./TeamCard.css\"\n\ninterface TeamProps {\n    team: Team;\n}\n\nconst TeamCard:React.FC<TeamProps> = ({team}) =>  {\n    return (\n        <Card title={team.name}>\n            <h3>מספר המערכות: {team.numberOfSystems}</h3>\n            <h3>מספר השרתים: {team.numberOfServers}</h3>\n        </Card>\n    );\n};\n\nexport default TeamCard;","import React, {useState} from \"react\";\nimport {getTeams} from \"../../api/TeamApi\";\nimport {List} from \"antd\";\nimport \"./TeamsList.css\"\nimport TeamCard from \"./TeamCard\";\n\nconst TeamsList = () =>  {\n    const [teams, setTeams] = useState(getTeams());\n\n    return (\n        <List\n            dataSource={teams}\n            renderItem={team => (\n                <TeamCard team={team}/>\n            )}\n        />\n    );\n};\n\n\nexport default TeamsList;","import {Team} from \"../types/team\";\n\nexport const getTeams = (): Array<Team> => [\n    new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10\n    }),\n];","import React, {useState} from 'react';\nimport './App.css';\n\nimport ServersTable from \"./components/ServersTable/ServersTable\";\nimport {deleteServerApi, getServers} from \"./api/ServerApi\";\nimport {filterObjFromArray} from \"./utils/ArrayUtils\";\n\nimport {Tabs} from \"antd\";\nimport \"antd/lib/tabs/style/index.css\"\n\nimport TeamsList from \"./components/TeamsList/TeamsList\";\n\nconst { TabPane } = Tabs;\n\nfunction App() {\n    const [servers, setServers] = useState(getServers());\n\n    const deleteServer = (serverId: string) => {\n        deleteServerApi(serverId);\n        setServers(filterObjFromArray(serverId, servers))\n    };\n\n    return (\n        <div className=\"App\">\n            <Tabs>\n                <TabPane tab=\"צוותים\" key=\"1\">\n                    <TeamsList/>\n                </TabPane>\n                <TabPane tab=\"טבלה\" key=\"2\">\n                    <p></p>\n                    <p></p>\n                    <p></p>\n                    <ServersTable\n                        servers={servers}\n                        deleteServer={deleteServer}\n                    />\n                </TabPane>\n            </Tabs>\n        </div>\n  );\n}\n\nexport default App;\n","import {Server} from \"../types/server\"\n export const getServers = () => {\n     return [\n         new Server({\n             id: \"1\",\n             serverName: 'yamut',\n             serverBase: 'ירקון',\n             teamName: 'אולטרה',\n             systemName: 'greenmile',\n             status: 'Down',\n             tags: ['Operational'],\n             ram: '24GB',\n             cores: '24',\n         }),\n         new Server({\n             id: \"2\",\n             serverName: 'yarmon',\n             serverBase: 'מפקדה',\n             teamName: 'אולטרה',\n             systemName: 'armon',\n             status: 'Good',\n             tags: ['Operational'],\n             ram: '128GB',\n            cores: '64',\n         }),\n         new Server({\n             id: \"3\",\n             serverName: 'eliza',\n             serverBase: 'מפקדה',\n             teamName: 'אולטרה',\n             systemName: 'alice',\n             status: 'Up',\n             tags: ['Tests'],\n             ram: '16GB',\n             cores: '24',\n         }),\n     ];\n };\n\n\nexport const deleteServerApi = (serverId: string) => {\n    console.log(\"Server Deleted\");\n};","import {Server} from \"../types/server\";\n\nexport const filterObjFromArray = (serverId: string, serverList: Array<Server>) => {\n    return serverList.filter(server => server.id !== serverId);\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}