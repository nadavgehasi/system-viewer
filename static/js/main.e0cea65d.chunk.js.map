{"version":3,"sources":["components/Menu/AppMenu.tsx","types/server.ts","utils/tableColumnsUtils.ts","components/ServersTable/ServerTableColumns.tsx","components/ServersTable/ServersTable.tsx","api/ServerApi.ts","utils/ArrayUtils.ts","types/team.ts","api/TeamApi.ts","components/General/List/PropertyList.tsx","components/General/Card/CardTitle.tsx","components/TeamsList/TeamCard.tsx","components/General/Modal/AddModal.tsx","components/TeamsList/TeamsList.tsx","types/system.ts","api/SystemApi.ts","components/TeamSystems/SystemCard.tsx","components/TeamSystems/SystemsList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppMenu","defaultSelectedKeys","Item","key","to","Server","server","id","serverName","serverBase","teamName","systemName","status","tags","ram","cores","this","getColumnByField","titleName","serverFieldName","title","dataIndex","sorter","firstServer","secondServer","field","sortByField","getServersTableColumns","deleteServer","render","text","icon","faEdit","map","tag","color","length","toUpperCase","faRedoAlt","record","faTrashAlt","onClick","event","ServersTable","useState","servers","setServers","data","dataSource","columns","serverId","console","log","serversList","filter","deleteServerFromServers","bordered","style","direction","Team","team","name","numberOfServers","numberOfSystems","info","teams","nextId","getTeams","PropertyList","content","Object","entries","objectEntry","CardTitle","deleteCard","float","TeamCard","deleteTeam","AddModal","visible","onOk","onCancel","newObj","newObject","setNewObject","e","okText","cancelText","placeholder","String","onChange","target","value","TeamsList","setTeams","addTeamVisible","setAddTeamVisible","teamId","updatedTeams","teamsList","deleteTeamFromTeams","deleteTeamApi","faPlus","newTeamInfo","Number","renderItem","System","system","systemServerName","systemServerId","systemTeam","SYSTEMS","SystemCard","deleteSystem","display","SystemsList","match","params","systems","setSystems","systemId","systemsList","deleteSystemFromSystems","App","className","path","exact","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0cea65d.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport React from \"react\";\nimport { Menu } from \"antd\";\nimport \"antd/lib/menu/style/index.css\";\n\nimport \"./AppMenu.css\";\n\nconst AppMenu = () => {\n  return (\n    <Menu defaultSelectedKeys={[\"/table\"]}>\n      <Menu.Item key=\"/table\">\n        <Link to=\"table\">שרתים</Link>\n      </Menu.Item>\n      <Menu.Item key=\"/teams\">\n        <Link to=\"/teams\">צוותים</Link>\n      </Menu.Item>\n    </Menu>\n  );\n};\n\nexport default AppMenu;\n","export const ID_FIELD: keyof Server = \"id\";\nexport const SERVER_NAME_FIELD: keyof Server = \"serverName\";\nexport const SERVER_BASE_FIELD: keyof Server = \"serverBase\";\nexport const TEAM_NAME_FIELD: keyof Server = \"teamName\";\nexport const SYSTEM_NAME_FIELD: keyof Server = \"systemName\";\nexport const STATUS_FIELD: keyof Server = \"status\";\nexport const TAGS_FIELD: keyof Server = \"tags\";\nexport const RAM_FIELD: keyof Server = \"ram\";\nexport const CORES_FIELD: keyof Server = \"cores\";\n\ninterface ServerInterface {\n  id: string;\n  serverName: string;\n  serverBase: string;\n  teamName: string;\n  systemName: string;\n  status: string;\n  tags: Array<string>;\n  ram: string;\n  cores: string;\n}\n\nexport class Server implements ServerInterface {\n  id: string;\n  serverName: string;\n  serverBase: string;\n  teamName: string;\n  systemName: string;\n  status: string;\n  tags: Array<string>;\n  ram: string;\n  cores: string;\n\n  constructor(server: ServerInterface) {\n    this.id = server.id;\n    this.serverName = server.serverName;\n    this.serverBase = server.serverBase;\n    this.teamName = server.teamName;\n    this.systemName = server.systemName;\n    this.status = server.status;\n    this.tags = server.tags;\n    this.ram = server.ram;\n    this.cores = server.cores;\n  }\n}\n","import { Server } from \"../types/server\";\n\n/**\n * Compares between two server objects by a specific field.\n * @param firstServer\n * @param secondServer\n * @param field The field serverName by which the objects should be compared\n */\nconst sortByField = (\n  firstServer: Server,\n  secondServer: Server,\n  field: keyof Server\n): number => {\n  if (firstServer[field] > secondServer[field]) {\n    return 1;\n  } else if (firstServer[field] < secondServer[field]) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n\nexport const getColumnByField = (\n  titleName: string,\n  serverFieldName: keyof Server\n) => {\n  return {\n    title: titleName,\n    dataIndex: serverFieldName,\n    key: serverFieldName,\n    sorter: (firstServer: Server, secondServer: Server) =>\n      sortByField(firstServer, secondServer, serverFieldName)\n  };\n};\n","import React from \"react\";\nimport { Tag } from \"antd\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit } from \"@fortawesome/free-regular-svg-icons/faEdit\";\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons/faTrashAlt\";\nimport { faRedoAlt } from \"@fortawesome/free-solid-svg-icons/faRedoAlt\";\nimport {\n  Server,\n  CORES_FIELD,\n  RAM_FIELD,\n  SERVER_NAME_FIELD,\n  STATUS_FIELD,\n  SYSTEM_NAME_FIELD,\n  TAGS_FIELD,\n  TEAM_NAME_FIELD,\n  SERVER_BASE_FIELD\n} from \"../../types/server\";\nimport { getColumnByField } from \"../../utils/tableColumnsUtils\";\n\nconst getServersTableColumns = (deleteServer: (serverId: string) => void) => {\n  return [\n    {\n      ...getColumnByField(\"שרת\", SERVER_NAME_FIELD),\n      render: (text: string) => (\n        <span>\n          <FontAwesomeIcon icon={faEdit} />\n          <a> {text}</a>\n        </span>\n      )\n    },\n    { ...getColumnByField(\"בסיס\", SERVER_BASE_FIELD) },\n    { ...getColumnByField(\"צוות\", TEAM_NAME_FIELD) },\n    { ...getColumnByField(\"מערכת\", SYSTEM_NAME_FIELD) },\n    {\n      ...getColumnByField(\"מבצעי / טסטים\", TAGS_FIELD),\n      render: (tags: Array<string>) => (\n        <span>\n          {tags.map(tag => {\n            let color = tag.length > 5 ? \"geekblue\" : \"green\";\n            if (tag === \"Tests\") {\n              color = \"volcano\";\n            }\n            return (\n              <Tag color={color} key={tag}>\n                {tag.toUpperCase()}\n              </Tag>\n            );\n          })}\n        </span>\n      )\n    },\n    {\n      ...getColumnByField(\"סטטוס\", STATUS_FIELD),\n      render: (text: string) => (\n        <span>\n          <FontAwesomeIcon icon={faRedoAlt} />\n          <a> {text}</a>\n        </span>\n      )\n    },\n    { ...getColumnByField(\"ראם\", RAM_FIELD) },\n    { ...getColumnByField(\"מספר ליבות\", CORES_FIELD) },\n    {\n      title: \"Delete\",\n      key: \"delete\",\n      render: (text: string, record: Server) => (\n        <span>\n          <FontAwesomeIcon\n            icon={faTrashAlt}\n            onClick={event => deleteServer(record.id)}\n          />\n        </span>\n      )\n    }\n  ];\n};\n\nexport default getServersTableColumns;\n","import React, { useState } from \"react\";\nimport { Table } from \"antd\";\nimport \"antd/lib/table/style/index.css\";\nimport \"antd/lib/tag/style/index.css\";\nimport \"antd/lib/pagination/style/index.css\";\nimport getServersTableColumns from \"./ServerTableColumns\";\nimport \"./ServersTable.css\";\nimport { deleteServerApi, getServers } from \"../../api/ServerApi\";\nimport { deleteServerFromServers } from \"../../utils/ArrayUtils\";\n\n// interface ServersTableProps {\n//     servers: Array<Server>;\n//     deleteServer: (serverId: string) => void;\n// }\n\nconst ServersTable: React.FC = () => {\n  const [servers, setServers] = useState(getServers());\n\n  const deleteServer = (serverId: string) => {\n    deleteServerApi(serverId);\n    setServers(deleteServerFromServers(serverId, servers));\n  };\n\n  const data = servers.map(server => ({\n    ...server,\n    key: server.id\n  }));\n\n  return (\n    <Table\n      dataSource={data}\n      columns={getServersTableColumns(deleteServer)}\n      bordered={false}\n      style={{ direction: \"rtl\" }}\n    />\n  );\n};\n\nexport default ServersTable;\n","import { Server } from \"../types/server\";\nexport const getServers = () => {\n  return [\n    new Server({\n      id: \"1\",\n      serverName: \"yamut\",\n      serverBase: \"ירקון\",\n      teamName: \"אולטרה\",\n      systemName: \"greenmile\",\n      status: \"Down\",\n      tags: [\"Operational\"],\n      ram: \"24GB\",\n      cores: \"24\"\n    }),\n    new Server({\n      id: \"2\",\n      serverName: \"yarmon\",\n      serverBase: \"מפקדה\",\n      teamName: \"אולטרה\",\n      systemName: \"armon\",\n      status: \"Good\",\n      tags: [\"Operational\"],\n      ram: \"128GB\",\n      cores: \"64\"\n    }),\n    new Server({\n      id: \"3\",\n      serverName: \"eliza\",\n      serverBase: \"מפקדה\",\n      teamName: \"אולטרה\",\n      systemName: \"alice\",\n      status: \"Up\",\n      tags: [\"Tests\"],\n      ram: \"16GB\",\n      cores: \"24\"\n    })\n  ];\n};\n\nexport const deleteServerApi = (serverId: string) => {\n  console.log(\"Server Deleted\");\n};\n","import { Server } from \"../types/server\";\nimport { System } from \"../types/system\";\nimport { Team } from \"../types/team\";\n\nexport const deleteServerFromServers = (\n  serverId: string,\n  serversList: Array<Server>\n) => {\n  return serversList.filter(server => server.id !== serverId);\n};\n\nexport const deleteSystemFromSystems = (\n  systemId: string,\n  systemsList: Array<System>\n) => {\n  return systemsList.filter(system => system.id !== systemId);\n};\n\nexport const deleteTeamFromTeams = (teamId: string, teamsList: Array<Team>) => {\n  return teamsList.filter(team => team.id !== teamId);\n};\n","interface TeamInterface {\n  id: string;\n  name: string;\n  numberOfServers: number;\n  numberOfSystems: number;\n  info: string;\n}\n\nexport class Team implements TeamInterface {\n  id: string;\n  name: string;\n  numberOfServers: number;\n  numberOfSystems: number;\n  info: string;\n\n  constructor(team: TeamInterface) {\n    this.id = team.id;\n    this.name = team.name;\n    this.numberOfServers = team.numberOfServers;\n    this.numberOfSystems = team.numberOfSystems;\n    this.info = team.info;\n  }\n}\n","import { Team } from \"../types/team\";\nimport { deleteTeamFromTeams } from \"../utils/ArrayUtils\";\n\nlet teams: Array<Team> = [\n  new Team({\n    id: \"1\",\n    name: \"אולטרה\",\n    numberOfServers: 12,\n    numberOfSystems: 100,\n    info: \"Interesting info\"\n  }),\n  new Team({\n    id: \"2\",\n    name: \"וונום\",\n    numberOfServers: 1,\n    numberOfSystems: 10,\n    info: \"Interesting info\"\n  })\n];\n\nlet nextId = \"3\";\n\nexport const getTeams = (): Array<Team> => teams;\n\nexport const addTeamApi = (name: string, info: string): Array<Team> => {\n  teams = [\n    ...teams,\n    new Team({\n      id: nextId,\n      name: name,\n      numberOfSystems: 0,\n      numberOfServers: 0,\n      info: info\n    })\n  ];\n  nextId = String(Number(nextId) + 1);\n  return getTeams();\n};\n\nexport const deleteTeamApi = (teamId: string): Array<Team> => {\n  console.log(`team with id: ${teamId} deleted`);\n  teams = deleteTeamFromTeams(teamId, teams);\n  return getTeams();\n};\n","import React from \"react\";\n\ninterface PropertyListProps {\n  content: Object;\n}\n\nconst PropertyList: React.FC<PropertyListProps> = ({ content }) => {\n  return (\n    <div>\n      {Object.entries(content).map(objectEntry => (\n        <h3>\n          {objectEntry[0]}: {objectEntry[1]}\n        </h3>\n      ))}\n    </div>\n  );\n};\n\nexport default PropertyList;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit } from \"@fortawesome/free-regular-svg-icons/faEdit\";\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons/faTrashAlt\";\nimport React, { ReactElement } from \"react\";\n\ninterface CardTitleProps {\n  id: string;\n  title: ReactElement;\n  deleteCard: (cardId: string) => void;\n}\n\nconst CardTitle: React.FC<CardTitleProps> = ({ id, title, deleteCard }) => {\n  return (\n    <div>\n      <FontAwesomeIcon icon={faEdit} style={{ float: \"right\" }} />\n      {title}\n      <FontAwesomeIcon\n        icon={faTrashAlt}\n        onClick={() => {\n          deleteCard(id);\n        }}\n        style={{ float: \"left\" }}\n      />\n    </div>\n  );\n};\n\nexport default CardTitle;\n","import React from \"react\";\nimport { Card } from \"antd\";\nimport { Team } from \"../../types/team\";\nimport \"antd/lib/card/style/index.css\";\nimport \"../General/Card/CardStyle.css\";\nimport { Link } from \"react-router-dom\";\nimport PropertyList from \"../General/List/PropertyList\";\nimport CardTitle from \"../General/Card/CardTitle\";\n\ninterface TeamProps {\n  team: Team;\n  deleteTeam: (teamId: string) => void;\n}\n\nconst TeamCard: React.FC<TeamProps> = ({ team, deleteTeam }) => {\n  return (\n    <Card\n      title={\n        <CardTitle\n          id={team.id}\n          title={<Link to={`/teams/${team.id}`}>{team.name}</Link>}\n          deleteCard={deleteTeam}\n        />\n      }\n    >\n      <PropertyList\n        content={{\n          \"מספר מערכות\": team.numberOfSystems,\n          \"מספר שרתים\": team.numberOfServers,\n          \"מידע חופשי\": team.info\n        }}\n      />\n    </Card>\n  );\n};\n\nexport default TeamCard;\n","import React, { useState } from \"react\";\nimport { Input, Modal } from \"antd\";\nimport \"antd/lib/modal/style/index.css\";\nimport \"antd/lib/button/style/index.css\";\nimport \"./AddModal.css\";\n\ninterface AddModalProps {\n  title: string;\n  visible: boolean;\n  onOk: (e: React.MouseEvent<HTMLElement>, newObject: any) => void;\n  onCancel: (e: React.MouseEvent<HTMLElement>, newObject: any) => void;\n  newObj: any;\n}\n\nconst AddModal: React.FC<AddModalProps> = ({\n  title,\n  visible,\n  onOk,\n  onCancel,\n  newObj\n}) => {\n  const [newObject, setNewObject] = useState(newObj);\n\n  const handleOk = (e: React.MouseEvent<HTMLElement>) => {\n    onOk(e, newObject);\n  };\n\n  const handleCancel = (e: React.MouseEvent<HTMLElement>) => {\n    onCancel(e, newObject);\n  };\n\n  return (\n    <Modal\n      title={title}\n      visible={visible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      okText={\"הוסף\"}\n      cancelText={\"בטל\"}\n    >\n      {Object.entries(newObject).map(objectEntry => (\n        <h3>\n          <span>{objectEntry[0]}: </span>\n          <Input\n            placeholder={String(objectEntry[1])}\n            onChange={e => {\n              newObj[objectEntry[0]] = e.target.value;\n              setNewObject(newObj);\n            }}\n          />\n        </h3>\n      ))}\n    </Modal>\n  );\n};\n\nexport default AddModal;\n","import React, { useState } from \"react\";\nimport { addTeamApi, deleteTeamApi, getTeams } from \"../../api/TeamApi\";\nimport { List } from \"antd\";\nimport \"../General/List/ListStyle.css\";\nimport TeamCard from \"./TeamCard\";\nimport { deleteTeamFromTeams } from \"../../utils/ArrayUtils\";\nimport AddModal from \"../General/Modal/AddModal\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nconst TeamsList = () => {\n  const [teams, setTeams] = useState(getTeams());\n  const [addTeamVisible, setAddTeamVisible] = useState(false);\n\n  const deleteTeam = (teamId: string) => {\n    const updatedTeams = deleteTeamApi(teamId);\n    setTeams(updatedTeams);\n  };\n\n  const addTeam = (e: React.MouseEvent<HTMLElement>, newTeamInfo: any) => {\n    setAddTeamVisible(false);\n    const updatedTeams = addTeamApi(newTeamInfo[\"שם\"], newTeamInfo[\"מידע\"]);\n    setTeams(updatedTeams);\n  };\n\n  return (\n    <div>\n      <FontAwesomeIcon\n        icon={faPlus}\n        style={{ float: \"right\" }}\n        onClick={() => {\n          setAddTeamVisible(true);\n        }}\n      />\n      <AddModal\n        title={\"הוספת צוות\"}\n        visible={addTeamVisible}\n        onOk={addTeam}\n        onCancel={(e: React.MouseEvent<HTMLElement>, newTeamInfo: any) => {\n          setAddTeamVisible(false);\n        }}\n        newObj={{\n          \"שם\": \"\",\n          \"מידע\": \"\"\n        }}\n      />\n      <List\n        dataSource={teams}\n        renderItem={team => <TeamCard team={team} deleteTeam={deleteTeam} />}\n      />\n    </div>\n  );\n};\n\nexport default TeamsList;\n","interface SystemInterface {\n  id: string;\n  name: string;\n  systemServerName: string;\n  systemServerId: string;\n  systemTeam: string;\n  info: string;\n}\n\nexport class System implements SystemInterface {\n  id: string;\n  name: string;\n  systemServerName: string;\n  systemServerId: string;\n  systemTeam: string;\n  info: string;\n\n  constructor(system: SystemInterface) {\n    this.id = system.id;\n    this.name = system.name;\n    this.systemServerName = system.systemServerName;\n    this.systemServerId = system.systemServerId;\n    this.systemTeam = system.systemTeam;\n    this.info = system.info;\n  }\n}\n","import { System } from \"../types/system\";\n\nlet SYSTEMS = [\n  new System({\n    id: \"1\",\n    name: \"Greenmile\",\n    systemServerId: \"123\",\n    systemServerName: \"yamut\",\n    systemTeam: \"ultra\",\n    info: \"Interesting info\"\n  }),\n  new System({\n    id: \"2\",\n    name: \"Alice\",\n    systemServerId: \"122\",\n    systemServerName: \"eliza\",\n    systemTeam: \"ultra\",\n    info: \"Interesting info\"\n  }),\n  new System({\n    id: \"3\",\n    name: \"Armon\",\n    systemServerId: \"124\",\n    systemServerName: \"yarmon\",\n    systemTeam: \"ultra\",\n    info: \"Interesting info\"\n  })\n];\n\nexport const getTeamSystems = (teamId: string) => {\n  console.log(`Got request for systems of ${teamId} team`);\n  return SYSTEMS;\n};\n\nexport const deleteSystemApi = (systemId: string) => {\n  console.log(\"System Deleted\");\n};\n","import React from \"react\";\nimport { Card } from \"antd\";\nimport \"antd/lib/card/style/index.css\";\nimport \"../General/Card/CardStyle.css\";\nimport { System } from \"../../types/system\";\nimport PropertyList from \"../General/List/PropertyList\";\nimport CardTitle from \"../General/Card/CardTitle\";\n\ninterface SystemProps {\n  system: System;\n  deleteSystem: (systemId: string) => void;\n}\n\nconst SystemCard: React.FC<SystemProps> = ({ system, deleteSystem }) => {\n  return (\n    <Card\n      title={\n        <CardTitle\n          id={system.id}\n          title={<div style={{ display: \"contents\" }}>{system.name}</div>}\n          deleteCard={deleteSystem}\n        />\n      }\n    >\n      <PropertyList\n        content={{\n          \"שם השרת\": system.systemServerName,\n          \"שם הצוות\": system.systemTeam,\n          \"מידע חופש\": system.info\n        }}\n      />\n    </Card>\n  );\n};\n\nexport default SystemCard;\n","import React, { useState } from \"react\";\nimport { deleteSystemApi, getTeamSystems } from \"../../api/SystemApi\";\nimport { List } from \"antd\";\nimport \"../General/List/ListStyle.css\";\nimport SystemCard from \"./SystemCard\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { deleteSystemFromSystems } from \"../../utils/ArrayUtils\";\n\ninterface SystemsListProps extends RouteComponentProps<{ teamId: string }> {}\n\nconst SystemsList: React.FC<SystemsListProps> = ({ match }) => {\n  const [systems, setSystems] = useState(getTeamSystems(match.params.teamId));\n\n  const deleteSystem = (systemId: string) => {\n    deleteSystemApi(systemId);\n    setSystems(deleteSystemFromSystems(systemId, systems));\n  };\n\n  return (\n    <List\n      dataSource={systems}\n      renderItem={system => (\n        <SystemCard system={system} deleteSystem={deleteSystem} />\n      )}\n    />\n  );\n};\n\nexport default SystemsList;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport AppMenu from \"./components/Menu/AppMenu\";\nimport ServersTable from \"./components/ServersTable/ServersTable\";\nimport TeamsList from \"./components/TeamsList/TeamsList\";\nimport SystemsList from \"./components/TeamSystems/SystemsList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <AppMenu />\n        <Switch>\n          <Route path=\"/\" exact component={TeamsList} />\n          <Route path=\"/table\" exact component={ServersTable} />\n          <Route path=\"/teams\" exact component={TeamsList} />\n          <Route path=\"/teams/:teamId\" component={SystemsList} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}