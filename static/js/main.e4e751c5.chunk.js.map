{"version":3,"sources":["components/Menu/AppMenu.tsx","types/server.ts","utils/tableColumnsUtils.ts","components/ServersTable/ServerTableColumns.tsx","components/ServersTable/ServersTable.tsx","api/ServerApi.ts","utils/ArrayUtils.ts","types/team.ts","components/General/PropertyList.tsx","components/General/CardTitle.tsx","components/TeamsList/TeamCard.tsx","components/TeamsList/TeamsList.tsx","api/TeamApi.ts","types/system.ts","api/SystemApi.ts","components/TeamSystems/SystemCard.tsx","components/TeamSystems/SystemsList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppMenu","defaultSelectedKeys","Item","key","to","Server","server","id","serverName","serverBase","teamName","systemName","status","tags","ram","cores","this","getColumnByField","titleName","serverFieldName","title","dataIndex","sorter","firstServer","secondServer","field","sortByField","getServersTableColumns","deleteServer","render","text","icon","faEdit","map","tag","color","length","toUpperCase","faRedoAlt","record","faTrashAlt","onClick","event","ServersTable","useState","servers","setServers","data","dataSource","columns","serverId","console","log","serversList","filter","deleteServerFromServers","bordered","style","direction","Team","team","name","numberOfServers","numberOfSystems","info","PropertyList","content","Object","entries","objectEntry","CardTitle","deleteCard","float","TeamCard","deleteTeam","TeamsList","teams","setTeams","teamId","deleteTeamApi","teamsList","deleteTeamFromTeams","renderItem","System","system","systemServerName","systemServerId","systemTeam","SYSTEMS","SystemCard","deleteSystem","display","SystemsList","match","params","systems","setSystems","systemId","systemsList","deleteSystemFromSystems","App","className","path","exact","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e4e751c5.chunk.js","sourcesContent":["import {Link} from \"react-router-dom\";\nimport React from \"react\";\nimport {Menu} from \"antd\";\nimport \"antd/lib/menu/style/index.css\";\n\nimport \"./AppMenu.css\";\n\n\nconst AppMenu = () => {\n    return (\n        <Menu defaultSelectedKeys={[\"/table\"]}>\n            <Menu.Item key=\"/table\">\n                <Link to=\"table\">שרתים</Link>\n            </Menu.Item>\n            <Menu.Item key=\"/teams\">\n                <Link to=\"/teams\">צוותים</Link>\n            </Menu.Item>\n        </Menu>\n    );\n};\n\nexport default AppMenu;","export const ID_FIELD: keyof Server = 'id';\nexport const SERVER_NAME_FIELD: keyof Server = 'serverName';\nexport const SERVER_BASE_FIELD: keyof Server = 'serverBase';\nexport const TEAM_NAME_FIELD: keyof Server = 'teamName';\nexport const SYSTEM_NAME_FIELD: keyof Server = 'systemName';\nexport const STATUS_FIELD: keyof Server = 'status';\nexport const TAGS_FIELD: keyof Server = 'tags';\nexport const RAM_FIELD: keyof Server = 'ram';\nexport const CORES_FIELD: keyof Server = 'cores';\n\ninterface ServerInterface {\n    id: string;\n    serverName: string;\n    serverBase: string;\n    teamName: string;\n    systemName: string;\n    status: string;\n    tags: Array<string>;\n    ram: string;\n    cores: string;\n}\n\nexport class Server implements ServerInterface {\n    id: string;\n    serverName: string;\n    serverBase: string;\n    teamName: string;\n    systemName: string;\n    status: string;\n    tags: Array<string>;\n    ram: string;\n    cores: string;\n\n    constructor(server: ServerInterface) {\n        this.id = server.id;\n        this.serverName = server.serverName;\n        this.serverBase = server.serverBase;\n        this.teamName = server.teamName;\n        this.systemName = server.systemName;\n        this.status = server.status;\n        this.tags = server.tags;\n        this.ram = server.ram;\n        this.cores = server.cores;\n    }\n}","import {Server} from \"../types/server\";\n\n/**\n * Compares between two server objects by a specific field.\n * @param firstServer\n * @param secondServer\n * @param field The field serverName by which the objects should be compared\n */\nconst sortByField = (firstServer: Server, secondServer: Server, field: keyof Server): number => {\n    if (firstServer[field] > secondServer[field]) {\n        return 1;\n    } else if (firstServer[field] < secondServer[field]) {\n        return -1;\n    } else {\n        return 0;\n    }\n};\n\nexport const getColumnByField = (titleName: string, serverFieldName: keyof Server) => {\n    return {\n        title: titleName,\n        dataIndex: serverFieldName,\n        key: serverFieldName,\n        sorter: (firstServer: Server, secondServer: Server) =>\n            sortByField(firstServer, secondServer, serverFieldName),\n    };\n};","import React from \"react\";\nimport {Tag} from \"antd\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faEdit} from \"@fortawesome/free-regular-svg-icons/faEdit\";\nimport {faTrashAlt} from \"@fortawesome/free-regular-svg-icons/faTrashAlt\";\nimport {faRedoAlt} from \"@fortawesome/free-solid-svg-icons/faRedoAlt\";\nimport {\n    Server,\n    CORES_FIELD, RAM_FIELD, SERVER_NAME_FIELD,\n    STATUS_FIELD, SYSTEM_NAME_FIELD,\n    TAGS_FIELD, TEAM_NAME_FIELD, SERVER_BASE_FIELD\n} from \"../../types/server\";\nimport {getColumnByField} from \"../../utils/tableColumnsUtils\";\n\nconst getServersTableColumns = (deleteServer: (serverId: string) => void) => { return [\n    {\n        ...getColumnByField('שרת', SERVER_NAME_FIELD),\n        render: (text: string) => (\n            <span>\n                <FontAwesomeIcon icon={faEdit} />\n                <a> {text}</a>\n            </span>\n        ),\n    },\n    {...getColumnByField('בסיס', SERVER_BASE_FIELD)},\n    {...getColumnByField('צוות', TEAM_NAME_FIELD)},\n    {...getColumnByField('מערכת', SYSTEM_NAME_FIELD)},\n    {\n        ...getColumnByField('מבצעי / טסטים', TAGS_FIELD),\n        render: (tags: Array<string>)  => (\n            <span>\n                {tags.map(tag => {\n                    let color = tag.length > 5 ? 'geekblue' : 'green';\n                    if (tag === 'Tests') {\n                        color = 'volcano';\n                    }\n                    return (\n                        <Tag color={color} key={tag}>\n                            {tag.toUpperCase()}\n                        </Tag>\n                    );\n                })}\n            </span>\n        ),\n    },\n    {\n        ...getColumnByField('סטטוס', STATUS_FIELD),\n        render: (text:string) => (\n            <span>\n                <FontAwesomeIcon icon={faRedoAlt} />\n                <a> {text}</a>\n            </span>\n        )\n    },\n    {...getColumnByField('ראם', RAM_FIELD)},\n    {...getColumnByField('מספר ליבות', CORES_FIELD),},\n    {\n        title: 'Delete',\n        key: 'delete',\n        render: (text: string, record:Server) => (\n            <span>\n                <FontAwesomeIcon icon={faTrashAlt} onClick={ (event) => deleteServer(record.id)} />\n            </span>\n),},\n];};\n\nexport default getServersTableColumns;\n","import React, {useState} from \"react\";\nimport { Table } from 'antd';\nimport \"antd/lib/table/style/index.css\"\nimport \"antd/lib/tag/style/index.css\"\nimport \"antd/lib/pagination/style/index.css\"\nimport getServersTableColumns from \"./ServerTableColumns\";\nimport \"./ServersTable.css\"\nimport {deleteServerApi, getServers} from \"../../api/ServerApi\";\nimport {deleteServerFromServers} from \"../../utils/ArrayUtils\";\n\n// interface ServersTableProps {\n//     servers: Array<Server>;\n//     deleteServer: (serverId: string) => void;\n// }\n\n\nconst ServersTable: React.FC = () => {\n    const [servers, setServers] = useState(getServers());\n\n    const deleteServer = (serverId: string) => {\n        deleteServerApi(serverId);\n        setServers(deleteServerFromServers(serverId, servers))\n    };\n\n    const data = servers.map(server => ({\n        ...server,\n        key: server.id,\n    }));\n\n    return (\n        <Table dataSource={data} columns={getServersTableColumns(deleteServer)} bordered={false} style={{direction: 'rtl'}}/>\n        );\n};\n\nexport default ServersTable;\n","import {Server} from \"../types/server\"\n export const getServers = () => {\n     return [\n         new Server({\n             id: \"1\",\n             serverName: 'yamut',\n             serverBase: 'ירקון',\n             teamName: 'אולטרה',\n             systemName: 'greenmile',\n             status: 'Down',\n             tags: ['Operational'],\n             ram: '24GB',\n             cores: '24',\n         }),\n         new Server({\n             id: \"2\",\n             serverName: 'yarmon',\n             serverBase: 'מפקדה',\n             teamName: 'אולטרה',\n             systemName: 'armon',\n             status: 'Good',\n             tags: ['Operational'],\n             ram: '128GB',\n            cores: '64',\n         }),\n         new Server({\n             id: \"3\",\n             serverName: 'eliza',\n             serverBase: 'מפקדה',\n             teamName: 'אולטרה',\n             systemName: 'alice',\n             status: 'Up',\n             tags: ['Tests'],\n             ram: '16GB',\n             cores: '24',\n         }),\n     ];\n };\n\n\nexport const deleteServerApi = (serverId: string) => {\n    console.log(\"Server Deleted\");\n};","import {Server} from \"../types/server\";\nimport {System} from \"../types/system\";\nimport {Team} from \"../types/team\";\n\nexport const deleteServerFromServers = (serverId: string, serversList: Array<Server>) => {\n    return serversList.filter(server => server.id !== serverId);\n};\n\nexport const deleteSystemFromSystems = (systemId: string, systemsList: Array<System>) => {\n    return systemsList.filter(system => system.id !== systemId);\n};\n\nexport const deleteTeamFromTeams = (teamId: string, teamsList: Array<Team>) => {\n    return teamsList.filter(team => team.id !== teamId);\n};","interface TeamInterface {\n    id: string;\n    name: string;\n    numberOfServers: number;\n    numberOfSystems: number;\n    info: string;\n}\n\nexport class Team implements TeamInterface {\n    id: string;\n    name: string;\n    numberOfServers: number;\n    numberOfSystems: number;\n    info: string;\n\n    constructor(team: TeamInterface) {\n        this.id = team.id;\n        this.name = team.name;\n        this.numberOfServers = team.numberOfServers;\n        this.numberOfSystems = team.numberOfSystems;\n        this.info = team.info;\n    }\n}","import React, {ReactElement} from \"react\";\n\ninterface PropertyListProps {\n    content: Object;\n}\n\nconst PropertyList: React.FC<PropertyListProps> = ({content}) => {\n    return (\n        <div>\n            {Object.entries(content).map(objectEntry => (\n                <h3>\n                    {objectEntry[0]}: {objectEntry[1]}\n                </h3>\n                ))}\n        </div>\n    );\n};\n\nexport default PropertyList;","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEdit} from \"@fortawesome/free-regular-svg-icons/faEdit\";\nimport {Link} from \"react-router-dom\";\nimport {faTrashAlt} from \"@fortawesome/free-regular-svg-icons/faTrashAlt\";\nimport React, {ReactElement} from \"react\";\n\ninterface CardTitleProps {\n    id: string,\n    title: ReactElement,\n    deleteCard: (cardId: string) => void\n}\n\nconst CardTitle: React.FC<CardTitleProps> = ({id, title, deleteCard}) => {\n    return (\n        <div>\n            <FontAwesomeIcon icon={faEdit} style={{float: \"right\"}} />\n            {title}\n            <FontAwesomeIcon icon={faTrashAlt} onClick={()=> {deleteCard(id)}} style={{float: \"left\"}} />\n        </div>\n    )};\n\nexport default CardTitle;","import React from \"react\";\nimport {Card} from \"antd\";\nimport {Team} from \"../../types/team\";\nimport \"antd/lib/card/style/index.css\"\nimport \"../General/CardStyle.css\"\nimport {Link} from \"react-router-dom\"\nimport PropertyList from \"../General/PropertyList\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEdit} from \"@fortawesome/free-regular-svg-icons/faEdit\";\nimport {faTrashAlt} from \"@fortawesome/free-regular-svg-icons/faTrashAlt\";\nimport CardTitle from \"../General/CardTitle\";\n\ninterface TeamProps {\n    team: Team;\n    deleteTeam: (teamId: string) => void\n}\n\nconst TeamCard:React.FC<TeamProps> = ({team, deleteTeam}) =>  {\n    return (\n        <Card\n            title={\n                <CardTitle\n                    id={team.id}\n                    title={<Link to={`/teams/${team.id}`}>{team.name}</Link>}\n                    deleteCard={deleteTeam}\n                />}>\n            <PropertyList content={{\n                \"מספר מערכות\": team.numberOfSystems,\n                \"מספר שרתים\": team.numberOfServers,\n                \"מידע חופשי\": team.info\n            }}/>\n        </Card>\n    );\n};\n\nexport default TeamCard;","import React, {useState} from \"react\";\nimport {deleteTeamApi, getTeams} from \"../../api/TeamApi\";\nimport {List} from \"antd\";\nimport \"../General/ListStyle.css\"\nimport TeamCard from \"./TeamCard\";\nimport {deleteTeamFromTeams} from \"../../utils/ArrayUtils\";\n\nconst TeamsList = () =>  {\n    const [teams, setTeams] = useState(getTeams());\n\n    const deleteTeam = (teamId: string) => {\n        deleteTeamApi(teamId);\n        setTeams(deleteTeamFromTeams(teamId, teams));\n    };\n\n    return (\n        <List\n            dataSource={teams}\n            renderItem={\n                team => (<TeamCard team={team} deleteTeam={deleteTeam}/>)\n            }\n        />\n    );\n};\n\nexport default TeamsList;","import {Team} from \"../types/team\";\n\nexport const getTeams = (): Array<Team> => [\n    new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }),new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }),new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }),new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }),new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }),new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }),new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }),new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }),new Team({\n        id: '1',\n        name: 'אולטרה',\n        numberOfServers: 12,\n        numberOfSystems: 100,\n        info: \"Interesting info\"\n    }), new Team({\n        id: '2',\n        name: 'וונום',\n        numberOfServers: 1,\n        numberOfSystems: 10,\n        info: \"Interesting info\"\n    }),\n];\n\nexport const deleteTeamApi = (teamId: string) => {\n    console.log(`team with id: ${teamId} deleted`)\n};","interface SystemInterface{\n    id: string;\n    name: string;\n    systemServerName: string;\n    systemServerId: string;\n    systemTeam: string;\n    info: string;\n}\n\nexport class System implements SystemInterface {\n    id: string;\n    name: string;\n    systemServerName: string;\n    systemServerId: string;\n    systemTeam: string;\n    info: string;\n\n    constructor(system: SystemInterface) {\n        this.id = system.id;\n        this.name = system.name;\n        this.systemServerName = system.systemServerName;\n        this.systemServerId = system.systemServerId;\n        this.systemTeam = system.systemTeam;\n        this.info = system.info;\n    }\n}","import {System} from \"../types/system\"\n\nlet SYSTEMS = [\n    new System({\n        id: \"1\",\n        name: \"Greenmile\",\n        systemServerId: \"123\",\n        systemServerName: \"yamut\",\n        systemTeam: \"ultra\",\n        info: \"Interesting info\"\n    }),\n    new System({\n        id: \"2\",\n        name: \"Alice\",\n        systemServerId: \"122\",\n        systemServerName: \"eliza\",\n        systemTeam: \"ultra\",\n        info: \"Interesting info\"\n    }),\n    new System({\n        id: \"3\",\n        name: \"Armon\",\n        systemServerId: \"124\",\n        systemServerName: \"yarmon\",\n        systemTeam: \"ultra\",\n        info: \"Interesting info\"\n    }),\n];\n\nexport const getTeamSystems = (teamId: string) => {\n    console.log(`Got request for systems of ${teamId} team`);\n    return SYSTEMS;\n};\n\n\nexport const deleteSystemApi = (systemId: string) => {\n    console.log(\"System Deleted\");\n};","import React from \"react\";\nimport {Card} from \"antd\";\nimport \"antd/lib/card/style/index.css\"\nimport \"../General/CardStyle.css\"\nimport {System} from \"../../types/system\";\nimport PropertyList from \"../General/PropertyList\";\nimport CardTitle from \"../General/CardTitle\";\n\ninterface SystemProps {\n    system: System;\n    deleteSystem: (systemId: string) => void\n}\n\nconst SystemCard:React.FC<SystemProps> = ({system, deleteSystem}) =>  {\n    return (\n        <Card title={<CardTitle id={system.id} title={<div style={{display: \"contents\"}}>{system.name}</div>} deleteCard={deleteSystem}/>}>\n            <PropertyList content={{\n                \"שם השרת\": system.systemServerName,\n                \"שם הצוות\": system.systemTeam,\n                \"מידע חופש\": system.info,\n            }}/>\n        </Card>\n    );\n};\n\nexport default SystemCard;","import React, {useState} from \"react\";\nimport {deleteSystemApi, getTeamSystems} from \"../../api/SystemApi\";\nimport {List} from \"antd\";\nimport \"../General/ListStyle.css\"\nimport SystemCard from \"./SystemCard\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {deleteSystemFromSystems, deleteTeamFromTeams} from \"../../utils/ArrayUtils\";\n\ninterface SystemsListProps extends RouteComponentProps<{teamId: string }> {\n\n}\n\nconst SystemsList: React.FC<SystemsListProps> = ({match}) =>  {\n    const [systems, setSystems] = useState(getTeamSystems(match.params.teamId));\n\n    const deleteSystem = (systemId: string) => {\n        deleteSystemApi(systemId);\n        setSystems(deleteSystemFromSystems(systemId, systems));\n    };\n\n    return (\n        <List\n            dataSource={systems}\n            renderItem={\n                system => (<SystemCard system={system} deleteSystem={deleteSystem}/>)\n            }\n        />\n    );\n};\n\n\nexport default SystemsList;","import React from 'react';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\n\nimport AppMenu from \"./components/Menu/AppMenu\";\nimport ServersTable from \"./components/ServersTable/ServersTable\";\nimport TeamsList from \"./components/TeamsList/TeamsList\";\nimport SystemsList from \"./components/TeamSystems/SystemsList\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <AppMenu/>\n                <Switch>\n                    <Route path=\"/\" exact component={TeamsList} />\n                    <Route path=\"/table\" exact component={ServersTable} />\n                    <Route path=\"/teams\" exact component={TeamsList} />\n                    <Route path=\"/teams/:teamId\" component={SystemsList} />\n                </Switch>\n            </BrowserRouter>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}